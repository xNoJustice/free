def cifter(str): #str deki ifadeleri cift yazdirma
    a = ""
    for i in str:
        a = a + i*2
    return(a)
print(cifter("Hello"))
#HHeelllloo
def hi_say(str): #str deki ifadelerin içinde ifade arayip toplami yazma
    sayac = 0
    for x in range (0,len(str),1):
        if str[x:x+2] == "hi":
            sayac += 1
    return sayac
print(hi_say("hiheYhiHeohiyOhi"))
#4
def metinarama(metin,arama): #metinde aramadaki degeri aratip toplami yazma
    sayac1 = 0
    for x in range(0,len(metin)-len(arama)-1):
        if metin[x:x+len(arama)] == arama:
            sayac1 += 1
    return sayac1
print(metinarama("hiheYhiHeohiyOhi", "heY"))
#1
def kedi_kopek(str): #str deki ifadelerin içinde ifadeler arayip ifadelerin esitligine göre true/false döndürme
    sayac1 = 0
    sayac2 = 0
    lm = len(str)
    for i in range(0,lm-3):
        if str[i:i+4] == "kedi":
            sayac1 += 1
    for j in range(0,lm-3):
        if str[j:j+5] == "köpek":
            sayac2 += 1
    return(sayac1 == sayac2)
    
print(kedi_kopek("kediköpekköpekkediidekkedikepökköpek"))
#True 
def sonunda_var_mi (m1,m2): #m1 ya da m2 içinde birbirine benzer kelime var ise true/false döndüren fonksiyon
    if len(m1)<len(m2):
        kac_harf = len(m1)
        sonu = m2[-kac_harf:]
        if sonu == m1:
            return True
        else:
                return False
    elif len(m2)<len(m1):
        kac_harf = len(m2)
        sonu = m1[-kac_harf:]
        if sonu == m2:
            return True
        else:
                return False
    elif m1 == m2:
            return True
    else : 
            return False        

print(sonunda_var_mi("kasap","kasakasap"))
#True
def x_y_z_var_mi(str): #metinin içinde xyz var ise true basinda noktali xyz var ise false döndüren fonksiyon
    for i in range(0,len(str)-2):
        if str[i:i+3] == 'xyz':
            if i == 0:
                return True
            elif str[i-1] != '.':
                return True
            else:
                return False
print(x_y_z_var_mi("denexyzme"))
#True
def yinele(metin): #Döngüsüz harfleri tek tek yazdirma RECURSIVE
    if len(metin):
        print(metin[0])
        return yinele(metin[1:])

yinele('selamlar')
#s
#e
#l
#a
#m
#l
#a
#r

def faktoriyel(sayi): #Faktoriyel fonksiyonu
        fak = 1
        if sayi == 1:
                print(sayi)
        else:
                for i in range (2,sayi+1): 
                        fak *= i
                return(fak)

print(faktoriyel(5))
#120

def faktoriyel2(sayi2): #Recursive Faktoriyel fonksiyon
        if sayi2 == 1:
                return sayi2
        else :  
                return sayi2 * faktoriyel2(sayi2-1)
print(faktoriyel2(5))
#120

def topla(sayi1):#kendisine verilen sayiya kadar olan sayilari toplayan Recursive Fonksiyon
        if sayi1 == 1:
                return 1
        else:
                return sayi1 + topla(sayi1-1)
print(topla(5))
#15

def topla13(list):#kendisine verilen listeyi 13 ve bir sonraki elemanı atlayıp toplayan fonksiyon
    c = 0
    i = 0
    while i < len(list):
        if list[i] == 13: 
            i += 2
        else:
            c += list[i]
            i += 1
    return c

print(topla13([10,13,10,11,10]))
#31

def topla67(list): # 6 dan 7'e kadar sayiları toplamadan geçen fonksiyon
    c = 0
    i = 0
    while i < len(list):
        if list[i] != 6:
            c += list[i]
            i += 1
        elif list[i] == 6:
            for i in range (list.index(list[i]), len(list)):
                if list[i] == 7:
                    stay = list.index(list[i])
            i += stay-i+1
            
    return c
print(topla67([1,2,3,4,5,6,5,4,3,7,1]))
#16

ogr = [bolum_no][sinif_no][ogrenci_no][ders_no]{'ders_adi': ***, 'hoca_adi': ***, 'vize': ***, 'final': ***, 'butunleme': ***}
ogr[0][0][0][0] = {'ders_adi': 'Veri Yapilari', 'hoca_adi': 'Efe Cosan', 'vize': 45, 'final': 45, 'butunleme': 100}
print(ogr[0][0][0][0]['ders_adi'])
120 bölümün adını kaydedeceksek hangi yapiyi tercih ederiz #List
30 öğrencinin tüm derslerinin sene sonu notlarını kaydeceksek #[Ogr_List][Ders_List]
30 öğrencinin ad, soyad, ogrenci_no bilgilerini kaydeceksek #[Ogr_List]{Dictionary}

#10 ilde 15 ilçede 7 şubede 14 ürün türünde 8 firmadan 3 markanın 19 ürünün gramaj ve fiyat döktürme
market = [[[[[[[{}]]]]]]]
for a in range (10):
    for b in range (15):
        for c in range (7):
            for d in range (14):
                for e in range (8):
                    for f in range (3):
                        for g in range (19):
                            print(market[a][b][c][d][e][f][g]{'gramaj'}, '-', market[a][b][c][d][e][f][g]{'fiyat'})